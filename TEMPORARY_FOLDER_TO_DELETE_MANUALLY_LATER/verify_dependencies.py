#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Comprehensive dependency verification script
This will check all dependencies and create a requirements file for bulletproof deployment
"""

import sys
import subprocess
import importlib
import pkg_resources

def check_dependency(module_name, import_name=None):
    """Check if a dependency is available and get its version"""
    
    if import_name is None:
        import_name = module_name
    
    try:
        # Try to import the module
        module = importlib.import_module(import_name)
        
        # Try to get version
        try:
            version = pkg_resources.get_distribution(module_name).version
        except:
            try:
                version = getattr(module, '__version__', 'Unknown')
            except:
                version = 'Unknown'
        
        return True, version
    except ImportError as e:
        return False, str(e)

def verify_all_dependencies():
    """Verify all critical dependencies"""
    
    print("🔍 Verifying All Dependencies")
    print("=" * 50)
    
    # Critical dependencies for the SKU Predictor
    dependencies = [
        ('numpy', 'numpy'),
        ('pandas', 'pandas'),
        ('scikit-learn', 'sklearn'),
        ('torch', 'torch'),
        ('openpyxl', 'openpyxl'),
        ('requests', 'requests'),
        ('urllib3', 'urllib3'),
        ('certifi', 'certifi'),
        ('joblib', 'joblib'),
        ('pyinstaller', 'PyInstaller'),
    ]
    
    all_good = True
    results = []
    
    for pkg_name, import_name in dependencies:
        available, version = check_dependency(pkg_name, import_name)
        
        if available:
            print(f"✅ {pkg_name}: {version}")
            results.append(f"{pkg_name}=={version}")
        else:
            print(f"❌ {pkg_name}: {version}")
            all_good = False
    
    print("\n" + "=" * 50)
    
    if all_good:
        print("✅ All dependencies are available!")
        
        # Create requirements file
        with open('requirements_bulletproof.txt', 'w') as f:
            f.write("# Bulletproof requirements for Fixacar SKU Predictor\n")
            f.write("# Generated by verify_dependencies.py\n\n")
            for req in results:
                f.write(req + "\n")
        
        print("📝 Created requirements_bulletproof.txt")
        return True
    else:
        print("❌ Some dependencies are missing!")
        return False

def check_numpy_specifically():
    """Check NumPy specifically with detailed diagnostics"""
    
    print("\n🔬 Detailed NumPy Diagnostics")
    print("=" * 40)
    
    try:
        import numpy as np
        print(f"✅ NumPy version: {np.__version__}")
        print(f"✅ NumPy location: {np.__file__}")
        
        # Test basic operations
        arr = np.array([1, 2, 3])
        print(f"✅ Basic array creation: {arr}")
        
        # Test core modules
        core_modules = [
            'numpy.core',
            'numpy.core._multiarray_umath',
            'numpy.linalg',
            'numpy.random',
            'numpy.fft'
        ]
        
        for module in core_modules:
            try:
                importlib.import_module(module)
                print(f"✅ {module}: Available")
            except ImportError as e:
                print(f"❌ {module}: {e}")
        
        return True
        
    except ImportError as e:
        print(f"❌ NumPy import failed: {e}")
        return False

def check_pandas_specifically():
    """Check Pandas specifically with detailed diagnostics"""
    
    print("\n🐼 Detailed Pandas Diagnostics")
    print("=" * 40)
    
    try:
        import pandas as pd
        print(f"✅ Pandas version: {pd.__version__}")
        print(f"✅ Pandas location: {pd.__file__}")
        
        # Test basic operations
        df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
        print(f"✅ Basic DataFrame creation: {df.shape}")
        
        # Test core modules
        core_modules = [
            'pandas._libs',
            'pandas._libs.tslibs',
            'pandas.core',
            'pandas.io'
        ]
        
        for module in core_modules:
            try:
                importlib.import_module(module)
                print(f"✅ {module}: Available")
            except ImportError as e:
                print(f"❌ {module}: {e}")
        
        return True
        
    except ImportError as e:
        print(f"❌ Pandas import failed: {e}")
        return False

def check_torch_specifically():
    """Check PyTorch specifically with detailed diagnostics"""
    
    print("\n🔥 Detailed PyTorch Diagnostics")
    print("=" * 40)
    
    try:
        import torch
        print(f"✅ PyTorch version: {torch.__version__}")
        print(f"✅ PyTorch location: {torch.__file__}")
        
        # Test basic operations
        tensor = torch.tensor([1.0, 2.0, 3.0])
        print(f"✅ Basic tensor creation: {tensor}")
        
        # Check CUDA availability
        if torch.cuda.is_available():
            print(f"✅ CUDA available: {torch.cuda.get_device_name(0)}")
        else:
            print("ℹ️ CUDA not available (CPU only)")
        
        # Test core modules
        core_modules = [
            'torch.nn',
            'torch.optim',
            'torch.utils',
            'torch.utils.data'
        ]
        
        for module in core_modules:
            try:
                importlib.import_module(module)
                print(f"✅ {module}: Available")
            except ImportError as e:
                print(f"❌ {module}: {e}")
        
        return True
        
    except ImportError as e:
        print(f"❌ PyTorch import failed: {e}")
        return False

def install_missing_dependencies():
    """Install any missing dependencies"""
    
    print("\n📦 Installing Missing Dependencies")
    print("=" * 40)
    
    # Try to install missing packages
    packages_to_install = []
    
    dependencies = [
        'numpy',
        'pandas', 
        'scikit-learn',
        'torch',
        'openpyxl',
        'requests',
        'pyinstaller'
    ]
    
    for pkg in dependencies:
        available, _ = check_dependency(pkg)
        if not available:
            packages_to_install.append(pkg)
    
    if packages_to_install:
        print(f"Installing: {', '.join(packages_to_install)}")
        
        for pkg in packages_to_install:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', pkg])
                print(f"✅ Installed {pkg}")
            except subprocess.CalledProcessError as e:
                print(f"❌ Failed to install {pkg}: {e}")
    else:
        print("✅ All dependencies are already installed!")

def main():
    """Main verification function"""
    
    print("🚀 Fixacar SKU Predictor - Dependency Verification")
    print("=" * 60)
    
    # Verify all dependencies
    all_deps_ok = verify_all_dependencies()
    
    # Detailed checks for critical libraries
    numpy_ok = check_numpy_specifically()
    pandas_ok = check_pandas_specifically()
    torch_ok = check_torch_specifically()
    
    print("\n📊 Summary")
    print("=" * 20)
    
    if all_deps_ok and numpy_ok and pandas_ok and torch_ok:
        print("✅ All dependencies verified successfully!")
        print("✅ Ready to build bulletproof executable!")
        return True
    else:
        print("❌ Some dependencies have issues")
        print("💡 Try running: python verify_dependencies.py --install")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--install':
        install_missing_dependencies()
        print("\n" + "="*40)
        print("Re-running verification after installation...")
        main()
    else:
        success = main()
        sys.exit(0 if success else 1)
